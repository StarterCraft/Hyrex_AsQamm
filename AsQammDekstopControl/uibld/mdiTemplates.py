from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import *
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
from threading import Thread
from time import sleep


class Ui_SensorWatchLast: 
   def setupUi(self): 
        self.frame = QFrame()
        self.frame.setObjectName(u"frame")
        self.frame.setGeometry(QRect(0, 0, 300, 160))
        sizePolicy = QSizePolicy(QSizePolicy.Fixed, QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.frame.sizePolicy().hasHeightForWidth())
        self.frame.setSizePolicy(sizePolicy)
        self.frame.setMinimumSize(QSize(300, 160))
        self.frame.setMaximumSize(QSize(300, 160))
        self.frame.setStyleSheet(u"QFrame {background-color: rgb(45, 45, 45);}\n"
"\n"
"\n"
"QRadioButton { font: 9pt \"Segoe UI Semilight\" ; }\n"
"\n"
"QGroupBox { font: 63 10pt \"Segoe UI Semibold\"; }\n"
"\n"
"QCheckBox, QLabel { font: 9pt \"Segoe UI Semilight\"; }\n"
"QCheckBox:disabled { color: gray; }\n"
"\n"
"QMessageBox { color: white; }\n"
"QMessageBox QPushButton { \n"
"	color: black;\n"
"    background-color: rgb(215, 215, 215);\n"
"	border: 1px solid gray;\n"
"	border-radius: 3px;  \n"
"	min-width: 6em;\n"
"	font: 8pt \"Segoe UI Semibold\";\n"
"}\n"
"\n"
"\n"
"QPushButton:hover { \n"
"	background-color: rgb(235, 235, 235);\n"
"}\n"
"\n"
"\n"
"QPushButton:pressed { \n"
"	background-color: rgb(221, 221, 221);\n"
"}\n"
"\n"
"\n"
"QTabWidget::pane {\n"
"	border-top: 1px solid white;\n"
"	padding: 2px;\n"
"}\n"
"\n"
"\n"
"QTabBar::tab {\n"
"    background: rgb(59, 59, 59);\n"
"    border: 1px solid white;\n"
"    border-top-left-radius: 4px;\n"
"	border-top-right-radius: 4px;\n"
"    padding-left: 7px;\n"
"    padding-right: 7px;\n"
"	p"
                        "adding-top: 3px;\n"
"	padding-bottom: 2px;\n"
"	font: 63 9pt \"Segoe UI Semibold\";\n"
"}\n"
"\n"
"\n"
"QTabBar::tab:disabled { background-color: gray; }\n"
"QTabBar::tab:active:disabled { background-color: grey; }\n"
"\n"
"\n"
"QTabBar::tab:hover {\n"
"	background-color: rgb(47, 105, 23);\n"
"	color: rgb(248, 248, 248);\n"
"}\n"
"\n"
"\n"
"QTabBar::tab:!selected {\n"
"    margin-top: 2px; /* make non-selected tabs look smaller */\n"
"}\n"
"\n"
"\n"
"/* make use of negative margins for overlapping tabs */\n"
"QTabBar::tab:selected {\n"
"    /* expand/overlap to the left and right by 4px */\n"
"    margin-left: -4px;\n"
"    margin-right: -4px;\n"
"	background-color: rgb(70, 175, 38);\n"
"}\n"
"\n"
"\n"
"QTabBar::tab:first:selected {\n"
"    margin-left: 0; /* the first selected tab has nothing to overlap with on the left */\n"
"}\n"
"\n"
"\n"
"QTabBar::tab:last:selected {\n"
"    margin-right: 0; /* the last selected tab has nothing to overlap with on the right */\n"
"}\n"
"\n"
"\n"
"QListView {\n"
"    show-d"
                        "ecoration-selected: 1; /* make the selection span the entire width of the view */\n"
"}\n"
"\n"
"\n"
"QListView::item:hover { background-color: rgb(47, 105, 23); }\n"
"QListView::item:selected { background-color: rgb(70, 175, 38) }\n"
"\n"
"\n"
"QSlider::handle:horizontal {\n"
"    background:  rgb(70, 175, 38);\n"
"    width: 18px;\n"
"    margin: -2px 0; /* handle is placed by default on the contents rect of the groove. Expand outside the groove */\n"
"    border-radius: 3px;\n"
"}\n"
"\n"
"\n"
"QSlider::handle:horizontal:hover { background-color: rgb(45, 102, 23); }\n"
"QSlider::handle:horizontal:disabled { background-color: grey; }\n"
"\n"
"\n"
" QScrollBar:vertical\n"
" {\n"
"     background-color: #2A2929;\n"
"     width: 15px;\n"
"     margin: 15px 3px 15px 3px;\n"
"     border: 1px transparent #2A2929;\n"
" }\n"
"\n"
"\n"
" QScrollBar::handle:vertical\n"
" {\n"
"     background-color: rgb(45, 45, 45);         /* #605F5F; */\n"
"     min-height: 5px;\n"
"	 border: 2px solid white;\n"
"	 border-radius: 4"
                        "px;\n"
" }\n"
"\n"
"\n"
" QScrollBar::sub-line:vertical\n"
" {\n"
"     margin: 3px 0px 3px 0px;\n"
"     border-image: url(:/qss_icons/rc/up_arrow_disabled.png);\n"
"     height: 10px;\n"
"     width: 10px;\n"
"     subcontrol-position: top;\n"
"     subcontrol-origin: margin;\n"
" }\n"
"\n"
"\n"
" QScrollBar::add-line:vertical\n"
" {\n"
"     margin: 3px 0px 3px 0px;\n"
"     border-image: url(:/qss_icons/rc/down_arrow_disabled.png);\n"
"     height: 10px;\n"
"     width: 10px;\n"
"     subcontrol-position: bottom;\n"
"     subcontrol-origin: margin;\n"
" }\n"
"\n"
"\n"
" QScrollBar::sub-line:vertical:hover,QScrollBar::sub-line:vertical:on\n"
" {\n"
"\n"
"     border-image: url(:/black/images/black/arrowUp_ico.png);\n"
"     height: 10px;\n"
"     width: 10px;\n"
"     subcontrol-position: top;\n"
"     subcontrol-origin: margin;\n"
" }\n"
"\n"
"\n"
" QScrollBar::add-line:vertical:hover, QScrollBar::add-line:vertical:on\n"
" {\n"
"     border-image: url(:/black/images/black/arrowDown_ico.png);\n"
"     heigh"
                        "t: 10px;\n"
"     width: 10px;\n"
"     subcontrol-position: bottom;\n"
"     subcontrol-origin: margin;\n"
" }\n"
"\n"
"\n"
" QScrollBar::up-arrow:vertical, QScrollBar::down-arrow:vertical\n"
" {\n"
"     background: none;\n"
" }\n"
"\n"
"\n"
" QScrollBar::add-page:vertical, QScrollBar::sub-page:vertical\n"
" {\n"
"     background: none;\n"
" }\n"
"\n"
"\n"
"QSpinBox { border: none; font: 9pt \"Segoe UI\"; }\n"
"QSpinBox:hover { border: 1px green sunken; }\n"
"QSpinBox:disabled { color: grey; }\n"
"\n"
"QSpinBox::up-button { color: white; }\n"
"QSpinBox::down-button { color: white; }\n"
"\n"
"\n"
"QTimeEdit { border: none; font: 9pt \"Segoe UI\"; }\n"
"QTimeEdit:hover { border: 1px green sunken; }\n"
"QTimeEdit:disabled { color: grey; }\n"
"\n"
"QTimeEdit::up-button { color: white; }\n"
"QTimeEdit::down-button { color: white; }\n"
"\n"
"\n"
"QComboBox {\n"
"	color: black;\n"
"    border: 1px solid gray;\n"
"    border-radius: 3px;\n"
"    padding: 1px 18px 1px 3px;\n"
"    min-width: 6em;\n"
"	font: 8pt \"Seg"
                        "oe UI Semilight\";\n"
"}\n"
"\n"
"\n"
"QComboBox:hover {\n"
"	border: 1px solid rgb(254, 254, 254);\n"
"	background-color: rgb(236, 236, 236);\n"
"}\n"
"\n"
"\n"
"QPushButton { \n"
"	color: black;\n"
"    background-color: rgb(215, 215, 215);\n"
"	border: 1px solid gray;\n"
"	border-radius: 3px;  \n"
"	min-width: 6em;\n"
"	font: 8pt \"Segoe UI Semibold\";\n"
"}\n"
"\n"
"\n"
"QPushButton:hover { \n"
"	background-color: rgb(235, 235, 235);\n"
"}\n"
"\n"
"\n"
"QPushButton:pressed { \n"
"	background-color: rgb(221, 221, 221);\n"
"}\n"
"\n"
"QToolButton { \n"
"	color: black;\n"
"    background-color: rgb(215, 215, 215);\n"
"	border: 1px solid gray;\n"
"	border-radius: 3px;\n"
"	font: 8pt \"Segoe UI Semibold\";\n"
"}\n"
"\n"
"\n"
"QToolButton:hover { \n"
"	background-color: rgb(235, 235, 235);\n"
"}\n"
"\n"
"\n"
"QToolButton:pressed { \n"
"	background-color: rgb(221, 221, 221);\n"
"}\n"
"\n"
"QComboBox:disabled { color: gray; background-color: rgb(35, 35, 35); }\n"
"\n"
"\n"
"QComboBox::down-arrow {\n"
"    image: u"
                        "rl(:/black/black/arrowDown_ico.png);\n"
"}\n"
"\n"
"\n"
"QComboBox::up-arrow { image: url(:/black/black/arrowUp_ico.png); }\n"
"\n"
"\n"
"QComboBox:editable {\n"
"    background: white;\n"
"}\n"
"\n"
"\n"
"QComboBox:!editable, QComboBox::drop-down:editable {\n"
"     background: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,\n"
"                                 stop: 0 #E1E1E1, stop: 0.4 #DDDDDD,\n"
"                                 stop: 0.5 #D8D8D8, stop: 1.0 #D3D3D3);\n"
"}\n"
"\n"
"\n"
"/* QComboBox gets the \"on\" state when the popup is open */\n"
"QComboBox:!editable:on, QComboBox::drop-down:editable:on {\n"
"    background: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,\n"
"                                stop: 0 #D3D3D3, stop: 0.4 #D8D8D8,\n"
"                                stop: 0.5 #DDDDDD, stop: 1.0 #E1E1E1);\n"
"}\n"
"\n"
"\n"
"QComboBox:on { /* shift the text when the popup opens */\n"
"    padding-top: 3px;\n"
"    padding-left: 4px;\n"
"}\n"
"\n"
"\n"
"QComboBox::drop-down {\n"
"    subcontrol-origi"
                        "n: padding;\n"
"    subcontrol-position: top right;\n"
"    width: 15px;\n"
"\n"
"    border-left-width: 1px;\n"
"    border-left-color: darkgray;\n"
"    border-left-style: solid; /* just a single line */\n"
"    border-top-right-radius: 3px; /* same radius as the QComboBox */\n"
"    border-bottom-right-radius: 3px;\n"
"}\n"
"\n"
"\n"
"QLineEdit { \n"
"	border-radius: 3px;\n"
"	border: 1px solid white;\n"
"	font: 8pt \"Segoe UI Semilight\";\n"
" }\n"
"\n"
"QLineEdit:hover { \n"
"	border-color: rgb(42, 105, 23);\n"
"}\n"
"\n"
"QKeySequenceEdit { font: 9pt \"Segoe UI Semilight\"; color: white; }\n"
"")
        self.frame.setFrameShape(QFrame.StyledPanel)
        self.frame.setFrameShadow(QFrame.Raised)
        self.gridLayout = QGridLayout(self.frame)
        self.gridLayout.setObjectName(u"gridLayout")
        self.degreeSignLabel = QLabel(self.frame)
        self.degreeSignLabel.setObjectName(u"degreeSignLabel")
        sizePolicy.setHeightForWidth(self.degreeSignLabel.sizePolicy().hasHeightForWidth())
        self.degreeSignLabel.setSizePolicy(sizePolicy)
        self.degreeSignLabel.setStyleSheet(u"font:28pt \"Segoe UI Semilight\";\n"
"color: rgb(255, 255, 255);")
        self.degreeSignLabel.setMargin(0)
        self.degreeSignLabel.setIndent(-1)
        self.degreeSignLabel.setText('Â°C')

        self.gridLayout.addWidget(self.degreeSignLabel, 1, 1, 1, 1)

        self.valueLabel = QLabel(self.frame)
        self.valueLabel.setObjectName(u"valueLabel")
        self.valueLabel.setStyleSheet(u"font: 72pt \"Segoe UI Semilight\";\n"
"color: rgb(255, 255, 255);")
        self.valueLabel.setTextFormat(Qt.PlainText)

        self.gridLayout.addWidget(self.valueLabel, 1, 0, 1, 1)

        self.topLabel = QLabel(self.frame)
        self.topLabel.setObjectName(u"topLabel")
        self.topLabel.setStyleSheet(u"font: 16pt \"Segoe UI Semilight\";\n"
"color: rgb(255, 255, 255);")

        self.gridLayout.addWidget(self.topLabel, 0, 0, 1, 2)


class SensorWatchLast(QMdiSubWindow):
    def __init__(self, mdiarea, name: str, properties: dict, fetchf, freq):
        QMdiSubWindow.__init__(self, mdiarea)
        self.setParent(mdiarea)
        self.setWindowTitle(name)
        self.ui = Ui_SensorWatchLast()
        self.ui.setupUi()
        self.setWidget(self.ui.frame)
        self.ui.topLabel.setText(properties['topLabel.text'])
        self.valueId = properties['valueId']

        self.frequency = freq

        self.monitor = Thread(target = self.updateValue, 
            name = f'MonitorVal{self.valueId}', args = (fetchf,))
        self.monitor.start()


    def setProperties(self, properties: dict):
        self.ui.topLabel.setText(properties['topLabel.text'])


    def updateValue(self, fetchf):
        while True:
            values = fetchf([self.valueId])
            self.ui.valueLabel.setText(str(values[self.valueId][-1]))
            sleep(self.frequency)
